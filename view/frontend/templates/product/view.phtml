<?php
    if ($block->showCustomizeButton()):
        $helpCustomizeButtonText = $block->getCustomizeButtonHelpText();
?>
    <div class="product-designer-button-container">
        <button type="button" class="action primary product-designer-button product-designer-customize">
            <span>
                <span><?php echo __('Customize It') ?></span>
            </span>
        </button>
    </div>
    <div id="dd-designer-container" style="display:none;">

        <div id="dd-designer">

        </div>

    </div>
    <script type="text/javascript">
        require([
            'jquery',
            'jquery/ui',
            'Magento_Ui/js/modal/modal',
            'underscore',
            'desgnerModule'

        ], function ($, ui, modal, _, _designer) {

        $(function () {

            var formCartSelector = '#product_addtocart_form';

            var priceAddonSelectorAfter = '.price-box.price-final_price';

            var configuredMediaProducts = {};
            var mediaUniqueIds = {};
            var imgsSaved = {};
            var designer = null;
            var parentProductId = '<?php echo $block->getProduct()->getId(); ?>';
            var defaultConfiguration = <?php echo $block->getDesignerConfiguration($block->getProduct()); ?>;
            var defaultLayerPrices = <?php echo $block->getLayerPrices(); ?>;

            var customPriceTrans = '<?php echo __('Design Price') ?>';

            var configuredPrices = {};
            <?php if($helpCustomizeButtonText !== ''): ?>

                var helpCustomizeButton = [
                    {
                        'content': '<?php echo $helpCustomizeButtonText ?>',
                        'selector': ".product-designer-customize"
                    }
                ];
                var _customize = $('body').dd_help({
                    'data': helpCustomizeButton
                });

                _customize.show();

            <?php endif; ?>

            var options = {
                type: 'popup',
                responsive: true,
                innerScroll: true,
                modalClass: 'dd-designer-modal'
            };
            var popup = modal(options, $('#dd-designer-container'));

            function findConf(productId) {
                var _currConf = false;
                $.each(defaultConfiguration, function (i, conf) {
                    if (conf.product_id == productId) {
                        _currConf = conf;
                    }
                });

                return _currConf;
            }

            function findMediaConf(productConf, mediaId) {
                var mediaConf = {};

                if (!productConf || !productConf.imgs) {
                    return mediaConf;
                }
                $.each(productConf.imgs, function (i, img) {
                    if (img.media_id == mediaId) {
                        mediaConf = img;
                    }
                });

                return mediaConf;
            }

            function findConfLayer(media_id, fabricObj) {
                var conf = {
                    'index': 0
                };
                var allLayers = configuredMediaProducts[media_id];
                if (typeof (allLayers) === 'undefined') {
                    return conf;
                }
                conf.index = allLayers.length;
                $.each(allLayers, function (index, layer) {
                    if (layer.uid == fabricObj.uid) {
                        conf = {
                            'index': index,
                            'layer': layer
                        }
                    }
                });

                return conf;
            }

            function clearAll(media_id) {
                configuredMediaProducts[media_id] = [];
            }

            function updateImgFabricConf(fabricObj, group_uid, media_id, type) {
                if (fabricObj.mainBg) {
                    return;
                }
                var conf = findConfLayer(media_id, fabricObj);
                if (type === 'remove') {
                    configuredMediaProducts[media_id].splice(conf.index, 1);
                    designer.setMainConfig(configuredMediaProducts);
                    return;
                }
                if (fabricObj.type === 'image' || fabricObj.type === 'text' || fabricObj.type === 'i-text' || fabricObj.isSvg) {
                    if (typeof (configuredMediaProducts[media_id]) === 'undefined') {
                        configuredMediaProducts[media_id] = [];
                    }
                    configuredMediaProducts[media_id][conf.index] = fabricObj;
                    designer.setMainConfig(configuredMediaProducts);
                }
            }

            function saveImage(media_id, product_id, imgData) {
                if (typeof (imgsSaved[product_id]) === 'undefined') {
                    imgsSaved[product_id] = {};
                }

                imgsSaved[product_id][media_id] = imgData;
                drawImages(imgsSaved[product_id], product_id, media_id);
            }

            function editImage(product_id, media_id, skipOpen) {
                var productConf = findConf(product_id);
                var img = findMediaConf(productConf, media_id);
                var designer = initDesigner(img, skipOpen);
                drawImageSelector(productConf.imgs, designer);
            }

            function removeImage(media_id, product_id) {
                delete imgsSaved[product_id][media_id];
                drawImages(imgsSaved[product_id], product_id, media_id);
                removeHidden(media_id);
            }

            function addHidden(media_id, uniqueId) {
                var uniqueId = uniqueId ? uniqueId : mediaUniqueIds[media_id];
                if ($(formCartSelector).find('input[data-media="' + media_id + '"]').get(0)) {
                    return;
                }
                $(formCartSelector).append($('<input>')
                        .attr({
                            'name': 'dd_design[]',
                            'value': uniqueId,
                            'data-media': media_id,
                            'type': 'hidden'
                        }));
            }

            function removeHidden(media_id) {
                $(formCartSelector).find('input[data-media="' + media_id + '"]')
                        .remove();
            }

            function drawImages(medias, product_id) {
                if (Object.keys(medias).length == 0) {
                    configurableOptionsDisplay(1);
                    $('#dd-designer-medias').remove();
                    return;
                }
                if (!$('#dd-designer-medias').get(0)) {
                    drawContainer();
                }

                configurableOptionsDisplay(0);

                $('#dd-designer-medias').empty();

                $.each(medias, function (media_id, media) {
                    var div = $('<div />').addClass('dd-designer-media');
                    var img = $('<img>').attr('src', media);
                    div.append(img);
                    var remove = $('<a/>').addClass('dd-designer-media-remove fa fa-trash')
                            .attr('href', 'javascript:void(0)');
                    remove.on('click', function () {
                        removeImage(media_id, product_id);
                        removePrice(media_id);
                        showPrice();
                    });
                    var edit = $('<a/>').addClass('dd-designer-media-edit fa fa-edit')
                            .attr('href', 'javascript:void(0)');

                    edit.on('click', function () {
                        editImage(product_id, media_id);
                    });
                    div.append(remove);
                    div.append(edit);
                    $('#dd-designer-medias').append(div);
                });
            }

            function setPrices(mediaId, json) {
                if (!defaultLayerPrices[mediaId]['layer_img_price'] && !defaultLayerPrices[mediaId]['layer_txt_price']) {
                    return;
                }
                configuredPrices[mediaId] = 0;
                $.each(json, function (i, obj) {
                    if (obj.type === 'image' || obj.isSvg) { //image price
                        configuredPrices[mediaId] += defaultLayerPrices[mediaId]['layer_img_price'];
                    }
                    if (obj.type === 'text' || obj.type === 'i-text') {
                        configuredPrices[mediaId] += defaultLayerPrices[mediaId]['layer_txt_price'];
                    }
                });
            }

            function removePrice(mediaId) {
                configuredPrices[mediaId] = 0;
            }

            function showPrice() {
                var totalPrice = 0;
                var currency = null;
                $.each(configuredPrices, function (media_id, price) {
                    totalPrice += price;
                    if (!currency) {
                        currency = defaultLayerPrices[media_id]['currency'];
                    }
                });
                $('.dd-product-designer-price').remove();
                if (totalPrice > 0) {
                    var spanPrice = $('<span />').addClass('dd-product-designer-price').html(
                            ' +' + currency + '' + totalPrice.toFixed(2) + ' '
                                 + '(' + customPriceTrans + ')'
                            );

                    $('' + priceAddonSelectorAfter).after(spanPrice);
                }
            }

            function drawContainer() {
                var container = $('<div />').attr('id', 'dd-designer-medias');
                $('.product-designer-button-container').after(container);
            }

            function drawImageSelector(imgs, designer) {
                var container = $('<div />').addClass('dd-designer-image-selector');
                $.each(imgs, function (i, _img) {
                    var img = $('<img>').attr('src', _img.src);
                    container.append(img);
                    if (designer.getMediaId() == _img.media_id) {
                        img.addClass('active');
                    }
                    img.on('click', function () {
                        var _designer = initDesigner(_img, true);
                        drawImageSelector(imgs, _designer);
                    });
                });

                $('#dd-designer').append(container);

                container.fadeIn('slow');
                return container;
            }

            function saveDesignedImage(media_id, data, json, svgText, obj) {

                var conf = configuredMediaProducts[media_id] ? configuredMediaProducts[media_id] : {};
                var json = json ? json : {};
                $.ajax({
                    url: '<?php echo $block->getSaveDesignUrl() ?>',
                    method: 'post',
                    data: {
                        'conf': JSON.stringify(conf),
                        'data': data,
                        'json': JSON.stringify(json),
                        'svg' : JSON.stringify(svgText),
                        'unique_id': mediaUniqueIds[media_id],
                        'media_id': media_id
                    },
                    success: function (data) {
                        if (data.error) {
                            alert(data.errorMessage);
                            return;
                        }
                        if (data.success) {
                            mediaUniqueIds[media_id] = data.design_id;
                            addHidden(media_id, data.design_id);

                            setPrices(media_id, conf);
                            showPrice();
                        }
                    },
                    error: function () {
                        alert("Something went wrong!");
                    },
                    complete: function () {
                        obj.hideLoading();
                    },
                    cache: false
                }, 'json');
            }

            function initDesigner(img, skipOpen) {

                <?php if($block->getShareDesign()): ?>
                     img.conf = <?php echo $block->getShareDesign() ?>
                <?php endif; ?>

                img.conf = configuredMediaProducts[img.media_id] ? configuredMediaProducts[img.media_id]
                        : img.conf;

                $('#dd-designer').html('');
                $('#dd-designer').empty();
                $('#dd-designer').html('<span class="dd-designer-loading"><?php echo __('Loading') ?>...</span>');

                if (designer) {
                    designer.destroy();
                }
                designer = $('#dd-designer').dd_productdesigner({
                    'src': img.src,
                    'width': img.sizes.width,
                    'height': img.sizes.height,

                    'sku': img.sku,
                    'product_id': img.product_id,
                    'parent_product_id': <?php echo $block->getProduct()->getId(); ?>,
                    'media_id': img.media_id,
                    'group_index': img.group_index,
                    'mask': img.mask,
                    'conf': img.conf,
                    'extra_config': img.extra_config,
                    'settings': {
                        'listFonts': <?php echo json_encode($block->getFonts()); ?>,
                        'urlUploadImages': '<?php echo $block->getUploadFileUrl(); ?>',
                        'myFilesPath': '<?php echo $block->getMyFilesUrl() ?>',
                        'fbImagesPath': '<?php echo $block->getFbImagesUrl() ?>',
                        'libraryPath': '<?php echo $block->getLibraryUrl() ?>',
                        'addphoto': <?php echo $block->getIsAddImageEnabled() ? 'true' : 'false' ?>,
                        'addtext': <?php echo $block->getIsAddTextEnabled() ? 'true' : 'false' ?>,
                        'shareFb': <?php echo $block->getIsFbShareEnabled() ? 'true' : 'false' ?>,
                        'shareTw': <?php echo $block->getIsTwShareEnabled() ? 'true' : 'false' ?>,
                        'sharePn': <?php echo $block->getIsPintShareEnabled() ? 'true' : 'false' ?>,
                        'shareUrl': '<?php echo $block->getShareUrl() ?>',
                        'addfromlibrary': <?php echo $block->getIsAddFromLibraryEnabled() ? 'true' : 'false' ?>,
                        'importFbEnabled': <?php echo $block->getIsImportFromFbEnabled() ? 'true' : 'false' ?>,
                        'importInstagramEnabled': <?php echo $block->getIsInstagramImportEnabled() ? 'true' : 'false' ?>,
                        'instagramClientId': '<?php echo $block->getInstagramClientId() ?>'
                    }
                    <?php if($helpConf = $block->getHelpDesigner()): ?>
                    ,help: <?php echo json_encode($helpConf); ?>
                    <?php endif; ?>

                });

                designer.onUpdate(updateImgFabricConf);
                designer.onClearAll(clearAll);

                designer.onClose(function () {
                    callClose();
                });

                function callClose() {
                    designer.destroy();
                    $('#dd-designer-container').modal('closeModal');
                    setTimeout(function() {
                        $('html, body').animate({
                            scrollTop: $(".action.tocart").offset().top
                        }, 800);
                    }, 100);
                }

                designer.onSave(function () {
                    designer.unselectAll();
                    this.showLoading();
                    var data = designer.getData();
                    var media_id = designer.getMediaId();
                    var product_id = designer.getProductId();
                    var json = designer.getJson();
                    var svgText = designer.getSvgText();
                    saveImage(media_id, product_id, data);
                    saveDesignedImage(media_id, data, json, svgText, this);
                    /// close designer ///
                    callClose();
                });
                designer.init();
                if (!skipOpen) {
                    $('#dd-designer-container').modal('openModal');
                }
                return designer;
            }

            function configurableOptionsDisplay(state){
                $('.product-options-wrapper .swatch-attribute').each(function(){
                    if(!$('.multi-addtocart-table',this).length){
                        if(typeof state != 'undefined' && state == 1){
                            $(this).show();
                        }else{
                            $(this).hide();
                        }
                    }
                });
            }

            $('.product-designer-button').on('click', function () {
                var valid = $('#product_addtocart_form').valid();

                if (valid) {

                    var selected_options = {};

    <?php if ($block->getProduct()->getTypeId() == 'configurable'): ?>

                        $('div.swatch-attribute').each(function (k, v) {
                            var attribute_id = $(v).attr('attribute-id');
                            if (!attribute_id) { return; }

                            if($('.multi-addtocart-table',v).length){
                                selected_options[attribute_id] = $('table.multi-addtocart-table div.swatch-option.selected').first().attr('option-id');
                            }else {
                                selected_options[attribute_id] = $(v).attr('option-selected');
                            }
                        });
                        if($('[data-role=swatch-options]').data('mageSwatchRenderer')) {
                          var product_id_index = $('[data-role=swatch-options]').data('mageSwatchRenderer').options.jsonConfig.index;
                          var found_ids = [];
                          $.each(product_id_index, function (product_id, attributes) {
                              var productIsSelected = function (attributes, selected_options) {
                                  return _.isEqual(attributes, selected_options);
                              }
                              if (productIsSelected(attributes, selected_options)) {
                                  found_ids.push(product_id);
                              }
                          });
                          parentProductId = found_ids[0];
                        }
                        if($('[name="selected_configurable_option"]').val()){
                          parentProductId = $('[name="selected_configurable_option"]').val();
                        }

    <?php endif; ?>

                    var imgsConfiguration = findConf(parentProductId);
                    if (!imgsConfiguration || !imgsConfiguration.imgs) {
                        $('#dd-designer').html('<div class="dd-designer-no-config"><?php echo __('No Images found for this product!'); ?></div>');
                    } else {
                        var defaultImage = imgsConfiguration.imgs[0];
                        var _designer = initDesigner(defaultImage);
                        drawImageSelector(imgsConfiguration.imgs, _designer);
                    }

                }
                return;
            });

        });

    });
    <?php if($block->getIsImportFromFbEnabled()): ?>

        window.fbAsyncInit = function() {
          FB.init({
            appId: '<?php echo $block->getFbAppId(); ?>',
            cookie: true, // This is important, it's not enabled by default
            version: 'v2.2'
          });
        };

        (function(d, s, id){
          var js, fjs = d.getElementsByTagName(s)[0];
          if (d.getElementById(id)) {return;}
          js = d.createElement(s); js.id = id;
          js.src = "https://connect.facebook.net/en_US/sdk.js";
          fjs.parentNode.insertBefore(js, fjs);
        }(document, 'script', 'facebook-jssdk'));

    <?php endif; ?>

    </script>
<?php endif; ?>
